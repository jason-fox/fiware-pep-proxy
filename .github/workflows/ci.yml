name: CI
"on":
    push:
        branches:
            - master
    pull_request:
        branches:
            - master
    workflow_dispatch:
jobs:
    lint-dockerfile:
        name: Lint Dockerfile
        runs-on: ubuntu-latest
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: Run Hadolint Dockerfile Linter
              uses: burdzwastaken/hadolint-action@master
              with:
                  dockerfile: extras/docker
                  ignore: DL3006 DL3008 DL3033

    lint-markdown:
        name: Lint Markdown
        runs-on: ubuntu-latest
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: Use Node.js 12.x
              uses: actions/setup-node@v1
              with:
                  node-version: 12.x
            - name: Run Remark Markdown Linter
              run: |
                  npm install
                  npm run lint:md
            - name: Run Textlint Markdown Linter
              run: npm run lint:text

    lint-code:
        name: Lint JavaScript
        runs-on: ubuntu-latest
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: Use Node.js 12.x
              uses: actions/setup-node@v1
              with:
                  node-version: 12.x
            - name: Run EsLint Node.js Linter
              run: |
                  npm install
                  npm run lint

    unit-test:
        name: Unit Tests
        runs-on: ubuntu-latest
        strategy:
            matrix:
                node-version:
                    - 10.x
                    - 12.x
                    - 14.x
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: "Install Node.js ${{ matrix.node-version }}"
              uses: actions/setup-node@v1
              with:
                  node-version: "${{ matrix.node-version }}"
            - name: "Unit Tests with Node.js ${{ matrix.node-version }}"
              run: |
                  docker network create --driver=bridge my-network
                  docker run -d -h mysql --net=my-network  -p 3306:3306 --name mysql -v $(pwd)/test/mysql-data:/docker-entrypoint-initdb.d/:ro -e MYSQL_ROOT_PASSWORD=test  mysql:5.7
                  docker run -d --net=my-network -p 3000:3000 --name keyrock -e IDM_DB_USER=root -e IDM_DB_PASS=test -e IDM_DB_HOST=mysql -e IDM_DB_PORT=3306  fiware/idm:8.0.0

                  npm install
                  npm test

    code-coverage:
        name: Coveralls Code Coverage
        runs-on: ubuntu-latest
        needs: unit-test
        steps:
            - name: Git checkout
              uses: actions/checkout@v2
            - name: "Test Coverage with Node.js 12.x"
              uses: actions/setup-node@v1
              with:
                  node-version: 12.x
            - run: |
                  docker network create --driver=bridge my-network
                  docker run -d -h mysql --net=my-network  -p 3306:3306 --name mysql -v $(pwd)/test/mysql-data:/docker-entrypoint-initdb.d/:ro -e MYSQL_ROOT_PASSWORD=test  mysql:5.7
                  docker run -d --net=my-network -p 3000:3000 --name keyrock -e IDM_DB_USER=root -e IDM_DB_PASS=test -e IDM_DB_HOST=mysql -e IDM_DB_PORT=3306  fiware/idm:8.0.0

                  npm install
                  npm run test:coverage
            - name: Push to Coveralls
              uses: coverallsapp/github-action@master
              with:
                  github-token: ${{ secrets.GITHUB_TOKEN }}
